Parameters:
  
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.  

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.  

Resources:
  myVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myVPC1
    Properties:
      Tags:
      - Key: Name
        Value: IGW
     
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC1
      InternetGatewayId: !Ref myInternetGateway

  myVPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.17.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  ServerSecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable ICMP access"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 8
        IpProtocol: icmp
        ToPort: -1
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0' 
        IpProtocol: -1  
      VpcId: !Ref myVPC1

  ServerSecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable ICMP access"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 8
        IpProtocol: icmp
        ToPort: -1
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0' 
        IpProtocol: -1  
      VpcId: !Ref myVPC2


  mySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC1
      CidrBlock: 10.16.0.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-A

  mySubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC1
      CidrBlock: 10.16.16.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-C    

  mySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC2
      CidrBlock: 10.17.0.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-B


  MyEC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      #we reference the InstanceType parameter
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SubnetId: !Ref mySubnetA
      SecurityGroupIds:
      - !Ref ServerSecurityGroupA
      IamInstanceProfile: !Ref SSMProfile 
      
  MyEC2InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      #we reference the InstanceType parameter
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SubnetId: !Ref mySubnetB
      SecurityGroupIds:
      - !Ref ServerSecurityGroupB
      IamInstanceProfile: !Ref SSMProfile 
            
  SSMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMIAMRole   

  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore                         
  
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: enable
      DefaultRouteTablePropagation: enable
      Description: Transit Gateway Demo
      DnsSupport: enable
      VpnEcmpSupport: enable
      Tags: 
        - Key: Name
          Value: Transit Gateway Demo

  TransitGatewayAttachmentA:    
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
       - !Ref mySubnetA
      Tags: 
        - Key: Name
          Value: Transit Gateway Demo
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref myVPC1
      
  TransitGatewayAttachmentB:    
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
       - !Ref mySubnetB
      Tags: 
        - Key: Name
          Value: Transite Gateway Demo
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref myVPC2    

  VPC1SubnetARouteTab:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC1
      
  VPC1SubnetATGWRoute:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachmentA
    Properties:
      RouteTableId: !Ref VPC1SubnetARouteTab
      DestinationCidrBlock: 
        Fn::GetAtt:
        - myVPC2
        - CidrBlock 
      TransitGatewayId: !Ref TransitGateway

  VPC1SubnetAPrivateroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1SubnetARouteTab
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway  

  VPC1SubnetATGWRouteassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnetA
      RouteTableId: !Ref VPC1SubnetARouteTab
      
  VPC2SubnetBRouteTab:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC2
      
  VPC2SubnetBTGWRoute:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachmentB
    Properties:
      RouteTableId: !Ref VPC2SubnetBRouteTab
      DestinationCidrBlock: 
        Fn::GetAtt:
        - myVPC1
        - CidrBlock 
      TransitGatewayId: !Ref TransitGateway

  VPC1SubnetBTGWRouteassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnetB
      RouteTableId: !Ref VPC2SubnetBRouteTab

  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref mySubnetC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-NATG

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC1
      Tags:
      - Key: Name
        Value: myRouteTable
       
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
       RouteTableId: !Ref myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref myInternetGateway


  mySubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnetC
      RouteTableId: !Ref myRouteTable

  
